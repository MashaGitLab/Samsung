#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <PN532_I2C.h>
#include <PN532.h>
#include <NfcAdapter.h>
#include <Adafruit_NeoPixel.h>

#define PIEZO_PIN     26
#define RELAY_PIN     27
#define LED_PIN       16
#define NUM_LEDS      20

PN532_I2C pn532_i2c(Wire);
NfcAdapter nfc = NfcAdapter(pn532_i2c);
Adafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

const char* ssid = "IPhone(Masha)";
const char* password = "masha040609";

struct User {
  String uid;
  String role;
  bool isInside;
};

std::vector<User> users;
int teachersInside = 0;
int studentsInside = 0;

	
String serverURL = "http://172.20.10.1/mariav2ib/SetUserMaria.php";
//String urlGet = "http://192.168.63.162/dipib/getKey.php?id=2";

static unsigned char Pi[8][16] = {
    {12, 4, 6, 2, 10, 5, 11, 9, 14, 8, 13, 7, 0, 3, 15, 1},
    {6, 8, 2, 3, 9, 10, 5, 12, 1, 14, 4, 7, 11, 13, 0, 15},
    {11, 3, 5, 8, 2, 15, 10, 13, 14, 1, 7, 4, 12, 9, 6, 0},
    {12, 8, 2, 1, 13, 4, 15, 6, 7, 0, 10, 5, 3, 14, 9, 11},
    {7, 15, 5, 10, 8, 1, 6, 13, 0, 9, 3, 14, 11, 4, 2, 12},
    {5, 13, 15, 6, 9, 2, 12, 10, 11, 7, 8, 1, 4, 3, 14, 0},
    {8, 14, 2, 5, 6, 9, 1, 12, 15, 4, 11, 0, 13, 10, 3, 7},
    {1, 7, 14, 13, 0, 5, 8, 3, 4, 15, 10, 6, 9, 12, 11, 2}
};

typedef uint8_t vect[4]; // block size 32 bits

vect iter_key[32]; // iteration encryption keys

static void GOST_Magma_T(const uint8_t *in_data, uint8_t *out_data) {
    uint8_t first_part_byte, sec_part_byte;
    for (int i = 0; i < 4; i++) {
        first_part_byte = (in_data[i] & 0x0f);
        sec_part_byte = (in_data[i] & 0xf0) >> 4;
        first_part_byte = Pi[i * 2][first_part_byte];
        sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
        out_data[i] = (sec_part_byte << 4) | first_part_byte;
    }
}

static void GOST_Magma_Add(const uint8_t *a, const uint8_t *b, uint8_t *c) {
    for (int i = 0; i < 4; i++)
        c[i] = a[i] ^ b[i];
}

static void GOST_Magma_Add_32(const uint8_t *a, const uint8_t *b, uint8_t *c) {
    unsigned int internal = 0;
    for (int i = 0; i < 4; i++) {
        internal = a[i] + b[i] + (internal >> 8);
        c[i] = internal & 0xff;
    }
}

static void GOST_Magma_g(const uint8_t *k, const uint8_t *a, uint8_t *out_data) {
    uint8_t internal[4];
    uint32_t out_data_32;
    GOST_Magma_Add_32(a, k, internal);
    GOST_Magma_T(internal, internal);
    out_data_32 = internal[3];
    out_data_32 = (out_data_32 << 8) + internal[2];
    out_data_32 = (out_data_32 << 8) + internal[1];
    out_data_32 = (out_data_32 << 8) + internal[0];
    out_data_32 = (out_data_32 << 11) | (out_data_32 >> 21);
    out_data[0] = out_data_32;
    out_data[1] = out_data_32 >> 8;
    out_data[2] = out_data_32 >> 16;
    out_data[3] = out_data_32 >> 24;
}

static void GOST_Magma_G(const uint8_t *k, const uint8_t *a, uint8_t *out_data) {
    uint8_t a_0[4];
    uint8_t a_1[4];
    uint8_t G[4];
    for (int i = 0; i < 4; i++) {
        a_1[i] = a[4 + i];
        a_0[i] = a[i];
    }
    GOST_Magma_g(k, a_0, G);
    GOST_Magma_Add(a_1, G, G);
    for (int i = 0; i < 4; i++) {
        a_1[i] = a_0[i];
        a_0[i] = G[i];
    }
    for (int i = 0; i < 4; i++) {
        out_data[i] = a_0[i];
        out_data[4 + i] = a_1[i];
    }
}

static void GOST_Magma_G_Fin(const uint8_t *k, const uint8_t *a, uint8_t *out_data) {
    uint8_t a_0[4];
    uint8_t a_1[4];
    uint8_t G[4];
    for (int i = 0; i < 4; i++) {
        a_1[i] = a[4 + i];
        a_0[i] = a[i];
    }
    GOST_Magma_g(k, a_0, G);
    GOST_Magma_Add(a_1, G, G);
    for (int i = 0; i < 4; i++)
        a_1[i] = G[i];
    for (int i = 0; i < 4; i++) {
        out_data[i] = a_0[i];
        out_data[4 + i] = a_1[i];
    }
}

void GOST_Magma_Expand_Key(const uint8_t *key) {
    memcpy(iter_key[7], key, 4);
    memcpy(iter_key[6], key + 4, 4);
    memcpy(iter_key[5], key + 8, 4);
    memcpy(iter_key[4], key + 12, 4);
    memcpy(iter_key[3], key + 16, 4);
    memcpy(iter_key[2], key + 20, 4);
    memcpy(iter_key[1], key + 24, 4);
    memcpy(iter_key[0], key + 28, 4);
    memcpy(iter_key[15], key, 4);
    memcpy(iter_key[14], key + 4, 4);
    memcpy(iter_key[13], key + 8, 4);
    memcpy(iter_key[12], key + 12, 4);
    memcpy(iter_key[11], key + 16, 4);
    memcpy(iter_key[10], key + 20, 4);
    memcpy(iter_key[9], key + 24, 4);
    memcpy(iter_key[8], key + 28, 4);
    memcpy(iter_key[23], key, 4);
    memcpy(iter_key[22], key + 4, 4);
    memcpy(iter_key[21], key + 8, 4);
    memcpy(iter_key[20], key + 12, 4);
    memcpy(iter_key[19], key + 16, 4);
    memcpy(iter_key[18], key + 20, 4);
    memcpy(iter_key[17], key + 24, 4);
    memcpy(iter_key[16], key + 28, 4);
    memcpy(iter_key[31], key + 28, 4);
    memcpy(iter_key[30], key + 24, 4);
    memcpy(iter_key[29], key + 20, 4);
    memcpy(iter_key[28], key + 16, 4);
    memcpy(iter_key[27], key + 12, 4);
    memcpy(iter_key[26], key + 8, 4);
    memcpy(iter_key[25], key + 4, 4);
    memcpy(iter_key[24], key, 4);
}

void GOST_Magma_Encrypt(const uint8_t *blk, uint8_t *out_blk) {
    GOST_Magma_G(iter_key[0], blk, out_blk);
    for (int i = 1; i < 31; i++)
        GOST_Magma_G(iter_key[i], out_blk, out_blk);
    GOST_Magma_G_Fin(iter_key[31], out_blk, out_blk);
}

void GOST_Magma_Decrypt(const uint8_t *blk, uint8_t *out_blk) {
    GOST_Magma_G(iter_key[31], blk, out_blk);
    for (int i = 30; i > 0; i--)
        GOST_Magma_G(iter_key[i], out_blk, out_blk);
    GOST_Magma_G_Fin(iter_key[0], out_blk, out_blk);
}

String encode_to_string(uint8_t* array, size_t length) {
    String encoded;
    for (size_t i = 0; i < length; ++i) {
        encoded += char(array[i]);
    }
    return encoded;
}

void decode_from_string(String encoded, uint8_t* array, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        array[i] = encoded[i];
    }
}

void print_byte_array(const uint8_t* array, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        Serial.print(array[i], HEX);
        Serial.print(" ");
    }
    Serial.println();
}

String String_byte_array(const uint8_t* array, size_t length) {
  String arr = "";
  for (size_t i = 0; i < length; ++i) {
    arr += String(array[i], HEX); // Преобразуем байт в шестнадцатеричную строку
    arr += " ";                 // Добавляем пробел для разделения
  }
  return arr;
}

String encrypMessage(String input)
{
   uint8_t test_key[32] = {
        0xff, 0xfe, 0xfd, 0xfc,
        0xfb, 0xfa, 0xf9, 0xf8,
        0xf7, 0xf6, 0xf5, 0xf4,
        0xf3, 0xf2, 0xf1, 0xf0,
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };

    size_t input_length = input.length();
    size_t block_size = 8;
    size_t num_blocks = (input_length + block_size - 1) / block_size;

    uint8_t *buffer = new uint8_t[input_length + block_size - (input_length % block_size)];
    uint8_t *out_blk = new uint8_t[input_length + block_size - (input_length % block_size)];

    // Copy input string to buffer
    for (size_t i = 0; i < input_length; ++i) {
        buffer[i] = input[i];
    }

    // Pad the last block with zeros if necessary
    if (input_length % block_size != 0) {
        for (size_t i = input_length; i < num_blocks * block_size; ++i) {
            buffer[i] = 0;
        }
    }

    GOST_Magma_Expand_Key(test_key);

    Serial.println("Original message:");
    Serial.println(input);

    Serial.println("Bytes before encryption:");
    print_byte_array(buffer, num_blocks * block_size);

    Serial.println("Encrypting message:");
    for (size_t i = 0; i < num_blocks; ++i) {
        GOST_Magma_Encrypt(buffer + i * block_size, out_blk + i * block_size);
    }

    Serial.println("Bytes after decryption:");
    print_byte_array(out_blk, num_blocks * block_size);
  	String arr = String_byte_array(out_blk, num_blocks * block_size);
    Serial.println("Decoded message (string): ");
  	Serial.println(arr);
    return arr;

}

void setup() {
  Serial.begin(115200);
  strip.begin();
  strip.show();
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(PIEZO_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");

  nfc.begin();
  startupAnimation();
  Serial.println("Система готова к работе");
}

void loop() {
  String uid = readNFC();
  if (uid != "") {
    processCard(uid);
  }
  updateLEDStrip();
}

User* findUser(String uid) {
  for (auto& user : users) {
    if (user.uid == uid) return &user;
  }
  return nullptr;
}

void processCard(String uid) {
  User* user = findUser(uid);
  String action = (user != nullptr && user->isInside) ? "exit" : "input";
  
  String payload;
  int httpCode = sendData(uid, action, payload);
  
  // Всегда выводим полученный ответ
  Serial.println("Получен ответ: " + payload);

  if (httpCode == HTTP_CODE_OK) {
    if (payload.startsWith("OK/")) {
      String response = payload.substring(3);
      
      if (response == "ADMIN" || response == "TEACHER" || response == "USER") {
        handleServerResponse(uid, action, response);
      } 
      else if (response == "UNKNOWN") {
        Serial.println("Неизвестная роль пользователя");
        denyAccess();
      }
      else {
        Serial.println("Некорректный формат ответа");
        denyAccess();
      }
    }
    else if (payload == "NF") {
      Serial.println("Карта не найдена в системе");
      denyAccess();
    }
    else if (payload.startsWith("Error:")) {
      Serial.println("Ошибка сервера: " + payload);
      denyAccess();
    }
    else {
      Serial.println("Неопознанный ответ сервера");
      denyAccess();
    }
  } 
  else {
    Serial.println("Ошибка HTTP: " + String(httpCode));
    denyAccess();
  }
  
  printStatus();
}

int sendData(String uid, String action, String &payload) {
  HTTPClient http;
  String encUID = encrypMessage(uid);
  String postData = "data=" + encUID + "/" + action;
  
  http.begin(serverURL);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  
  int httpCode = http.POST(postData);
  payload = httpCode > 0 ? http.getString() : "";
  http.end();

  Serial.println("Отправка данных: " + postData);
  return httpCode;
}

void handleServerResponse(String uid, String action, String response) {
  String role = (response == "TEACHER" || response == "ADMIN") ? "Teacher" : "Student";
  
  if (action == "input") {
    if (role == "Student" && teachersInside == 0) {
      Serial.println("Студент не может войти без преподавателя");
      denyStudentAccess();
      return;
    }
    // Добавляем нового пользователя или обновляем статус
    User* existingUser = findUser(uid);
    if (!existingUser) {
      users.push_back({uid, role, true});
      if (role == "Teacher") teachersInside++;
      else studentsInside++;
    } 
    else {
      existingUser->isInside = true;
    }
    grantAccess(role);
  } 
  else {
    User* user = findUser(uid);
    if (user) {
      user->isInside = false;
      if (user->role == "Teacher") teachersInside--;
      else studentsInside--;
      grantAccess(user->role);
    }
  }
}

void denyStudentAccess() {
  Serial.println("Доступ запрещен: нет преподавателей");
  strip.fill(strip.Color(255, 0, 255)); // Желтый цвет
  strip.show();
  playTone(800, 200); // Один короткий сигнал
  delay(5000);
  strip.clear();
  strip.show();
}

void grantAccess(String role) {
  Serial.println("Доступ разрешен для: " + role);
  digitalWrite(RELAY_PIN, LOW);
  strip.fill(strip.Color(0, 0, 255)); // Зеленый
  strip.show();
  playTone(1000, 500);
  delay(5000);
  digitalWrite(RELAY_PIN, HIGH);
}

void denyAccess() {
  Serial.println("Доступ запрещен!");
  strip.fill(strip.Color(255, 0, 0)); // Красный
  strip.show();
  for (int i = 0; i < 3; i++) {
    playTone(500, 200);
    delay(200);
  }
  delay(5000);
}


void updateLEDStrip() {
  uint32_t color = strip.Color(0, 0, 0);
  
  if (teachersInside > 0) color = strip.Color(0, 255, 0);
  else if (studentsInside > 0) color = strip.Color(255, 255, 0);
  
  strip.fill(color);
  strip.show();
}

String readNFC() {
  if (!nfc.tagPresent()) return "";
  
  NfcTag tag = nfc.read();
  String uid = tag.getUidString();
  uid.replace(" ", "_");
  
  Serial.println("Сканировано: " + uid);
  playTone(1000, 100);
  return uid;
}

void playTone(int freq, int duration) {
  tone(PIEZO_PIN, freq, duration);
  delay(duration);
  noTone(PIEZO_PIN);
}

void startupAnimation() {
  for (int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(i, strip.Color(0, 150, 0));
    strip.show();
    delay(50);
  }
  playTone(1000, 500);
  delay(500);
  strip.clear();
  strip.show();
}
void printStatus() {
  Serial.println("\nТекущий статус:");
  Serial.println("Преподавателей внутри: " + String(teachersInside));
  Serial.println("Студентов внутри: " + String(studentsInside));
  for (auto& user : users) {
    if (user.isInside) {
      Serial.println(user.role + ": " + user.uid);
    }
  }
  Serial.println();
}
